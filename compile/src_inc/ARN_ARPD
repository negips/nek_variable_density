!> @file ARN_ARPD
!! @ingroup arn_arp
!! @brief Include file for Arnoldi method using ARPACK library
!! @author Adam Peplinski
!! @date Mar 7, 2016
!=======================================================================
!     module id and name
      integer arna_id
      character*(*) arna_name
      parameter(arna_name='ARN_ARP')

!     timer id
      integer arna_tmr_ini_id   ! initialisation itme
      integer arna_tmr_evl_id   ! evolution time

!     initialisation flag
      logical arna_ifinit

      logical arna_ifpr         !< @var include pressure in arnoldi vector
      integer arna_ifpr_id      ! id

      logical arna_ifcomplex    !< @var if complex arithmetic
      integer arna_ifcomplex_id ! id


!     runtime parameter part
!     section id
      integer arna_sec_id

!     parameter section
      integer arna_nkrl                  !< @var Krylov space size (ncv in ARPCK notation)
      integer arna_nkrl_id
      integer arna_negv                  !< @var number of eigenvalues to calculate (nev in ARPCK notation)
      integer arna_negv_id

!     array sizes; static allocation
!     max size of Krylov space (maxncv in ARPCK notation)
      integer arna_lkrl
      parameter (arna_lkrl = 200)

!     single vector sizes
      integer arna_lv, arna_lp, arna_lt
      parameter (arna_lv = LPX1*LPY1*LPZ1*LPELV) ! velocity mesh
      parameter (arna_lt = LPX1*LPY1*LPZ1*LPELT) ! temperature mesh
      parameter (arna_lp = LPX2*LPY2*LPZ2*LPELV) ! pressure mesh

!     one vector for all velocity components (maxn in ARPACK notation)
!     be careful about including temperature
      integer arna_ls
      parameter (arna_ls = arna_lv*3 + arna_lp + arna_lt*min(1,LDIMT)*0)

      ! length of the vector transferred to arpack 
      ! (combining velocity, pressure and temperature)
      integer arna_ns
      
      ! restart options; restart flag and file number
      logical arna_ifrst
      integer arna_fnum

!     common block section
      common /arnai/ arna_id, arna_tmr_ini_id, arna_tmr_evl_id, 
     $     arna_sec_id, arna_nkrl, arna_nkrl_id, arna_negv, 
     $     arna_negv_id, arna_ns, arna_fnum, arna_ifpr_id,
     $     arna_ifcomplex_id
      
      common /arnal/ arna_ifinit, arna_ifrst, arna_ifpr, arna_ifcomplex

!     Parameters for ARPACK; names kept for consistency with ARPACK naming
!     work array sizes for arpack
      integer wddima, wldima, wedima, wrdima
      parameter (wddima = 3*arna_ls)
      parameter (wldima = 3*arna_lkrl*arna_lkrl+6*arna_lkrl)
      parameter (wedima = 3*arna_lkrl)
      parameter (wrdima = arna_lkrl)

!     arrays
!     Complex case declaration      
      complex*16 workda(wddima)                 ! Main Arnoldi array for
                                                ! reverse communication
      complex*16 workla(wldima)                 ! Private work array 
                                                ! for arpack
      complex*16 workea(wedima)                 ! Private work array     
                                                ! for arpack
      complex*16 vbasea(arna_ls,arna_lkrl)      ! Krylov Vectors
      complex*16 resida(arna_ls)                ! Residual vector
      complex*16 driarp(arna_lkrl,2)            ! Ritz/Eigen values
      real       workra(wrdima)                 ! Private work array for
                                                ! arpack (Complex case only)
      complex*16 sigarp(1)                      ! Complex Shift

!!     Real Case declaration      
!      real workda(wddima)                       ! Main Arnoldi array for
!                                                ! reverse communication
!      real workla(wldima)                       ! Private work array 
!                                                ! for arpack
!      real workea(wedima)                       ! private work array 
!                                                ! for arpack
!      real vbasea(arna_ls,arna_lkrl)            ! Krylov Vectors
!      real resida(arna_ls)                      ! Residual vector
!      real driarp(arna_lkrl,4)                  ! Ritz/Eigen values
!      real       workra(wrdima)                 ! Private work array for
!                                                ! arpack (Complex case only)
!      real sigarp(2)                            ! Real and Imag
!                                                ! parts of the shift


!     integer parameters
      integer idoarp, iparp(11), ipntarp(14), nwlarp, infarp, ierrarp


!     logical parameters
      logical rvarp, selarp(arna_lkrl)

!     character parametres
      character bmatarp*1, whicharp*2, howarp*1

!     parameters for parpack with checkpointing
      integer nparp, ncarp

      real rnmarp

      integer idoarp0, arna_ns0, arna_negv0, arna_nkrl0, iparp0(11),
     $     ipntarp0(14), nwlarp0, infarp0, nparp0, ncarp0,
     $     tst_step0, tst_mode0

      character bmatarp0*1, whicharp0*2

      real tst_tol0, rnmarp0, dtarp0

!     common blocks
!     integer variables
      common /parpi/ idoarp, iparp, ipntarp, nwlarp, infarp, ierrarp,
     $     nparp, ncarp, idoarp0, arna_ns0, arna_negv0, arna_nkrl0, 
     $     iparp0, ipntarp0, nwlarp0, infarp0, nparp0, ncarp0, 
     $     tst_step0, tst_mode0

!     real/Complex variables
      common /parpr/ sigarp, workda, workla, workea,
     $     vbasea, resida, driarp, rnmarp, tst_tol0, rnmarp0, dtarp0,
     $     workra  


!     logical variables
      common /parpl/ rvarp, selarp

!     character variables
      common /parpch/ bmatarp, whicharp, howarp, bmatarp0, whicharp0
